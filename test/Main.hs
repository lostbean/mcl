module Main where

import Data.Graph.Markov
import Data.Graph.Sparse

-- =================================== Testing ===========================================

testP :: Graph Int Double
testP = mkUniGraph [] [ ((1, 2), 1), ((2,3), 1), ((3,1), 1)
                      , ((4, 5), 1), ((5,6), 1), ((6,4), 1)
                      , ((3, 4), 1) ]

testFig4 :: Graph Int Double
testFig4 = mkUniGraph [] [ ((0,1), 1), ((1,2), 1), ((2,3), 1), ((3,0), 1), ((2,0), 1)

                         , ((4,5), 1), ((5,6), 1), ((6,7), 1), ((7,4), 1), ((6,4), 1), ((5,7), 1)

                         , ((17,18), 1), ((18,20), 1), ((20,19), 1), ((19,17), 1), ((17,20), 1)

                         , ((8,9), 1), ((9,10), 1), ((10,13), 1), ((13,16), 1), ((16,15), 1), ((15,14), 1)
                         , ((14,11), 1), ((11,8), 1), ((9,12), 1), ((13,12), 1), ((15,12), 1), ((11,12), 1)
                         , ((8,12), 1), ((16,12), 1)

                         -- inter connections
                         , ((1,4), 1), ((18,3), 1), ((18,8), 1), ((7,8), 1), ((6,10), 1.5)
                         ]

testFig5 :: Graph Int Double
testFig5 = mkUniGraph [] [ ((0,1), 1), ((0,2), 1), ((0,3), 1), ((0,4), 1), ((0,5), 1)
                         , ((6,7), 1), ((6,8), 1), ((6,9), 1), ((6,10), 1)
                         , ((11,12), 1), ((11,13), 1), ((11,14), 1), ((11,15), 1)
                         -- inter connections
                         , ((0,6), 1), ((6,11), 1)
                         ]

-- =================================== Testing ===========================================

test :: Graph Int Double
test = mkUniGraph [20, 2] ([((1,2), 1), ((2,3), 1), ((5,2), 1), ((5,3), 1), ((60,1), 1) , ((7,4), 1)]::[((Int,Int), Double)])

testA :: Graph Int Double
testA = mkUniGraph [] ([((1, 2), 0.3), ((2,3), 0.8), ((3,1), 0.5)]::[((Int,Int), Double)])

testB :: Graph Int Double
testB = mkDiGraph [] ([((1, 2), 0.3), ((2,3), 0.8), ((3,1), 0.5)]::[((Int,Int), Double)])

testM_graph :: Bool
testM_graph = let
  a :: Graph Int Double
  a = mkDiGraph [] [ ((1,1), 2), ((1,2), 5), ((1,3), 1)
                   , ((2,1), 4), ((2,2), 3), ((2,3), 1)]

  b = mkDiGraph [] [ ((1,1), 1)
                   , ((2,2), 2)
                   , ((3,1), 2), ((3,2), 3), ((3,3), 1)]
  rm = mkDiGraph [] [ ((1,1),4.0),((1,2),13.0),((1,3),1.0)
                    , ((2,1),6.0),((2,2),9.0), ((2,3),1.0)]
  ra = mkDiGraph [] [ ((1,1), 3), ((1,2), 5), ((1,3), 1)
                    , ((2,1), 4), ((2,2), 5), ((2,3), 1)
                    , ((3,1), 2), ((3,2), 3), ((3,3), 1)]
  in rm == (multGraph a b) && ra == (addGraph a b)

-- ======================================== Test =========================================

testM :: Bool
testM = let
  m :: CRS Double
  m = graphToCRS $ mkDiGraph []
      [ ((1,1), 2), ((1,2), 5), ((1,3), 1)
      , ((2,1), 4), ((2,2), 3), ((2,3), 1)]
  v :: CRS Double
  v = graphToCRS $ mkDiGraph []
      [ ((1,1), 1)
      , ((2,2), 2)
      , ((3,1), 2), ((3,2), 3), ((3,3), 1)]
  -- expected result
  r :: CRS Double
  r = graphToCRS $ mkDiGraph []
      [ ((1,1),4.0),((1,2),13.0),((1,3),1.0)
      , ((2,1),6.0),((2,2),9.0), ((2,3),1.0)]
  in r == multMM m v && r == multMMsmrt m v
